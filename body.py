import telebot
from telebot import types
from database import *
import random

bot = telebot.TeleBot('976475763:AAHQ590SacIfLuQxrse7F4Dk0wEzr9wxcVQ')
global list1
global urword
global score
global maxscore
maxscore = 0
score = 0

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '‚úå–ü—Ä–∏–≤–µ—Ç, <b> {0.first_name}</b>! –Ø –±–æ—Ç-—Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è'
                                      ' –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–ºüá¨üáß!'.format(message.from_user), parse_mode='html')
    bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ /help —á—Ç–æ–±—ã –ø–æ–±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ —É–∑–Ω–∞—Ç—å!üòâ')

@bot.message_handler(commands=['help'])
def help_message(message):
    kb1 = types.ReplyKeyboardMarkup(True, True)
    kb1.row('–î–∞–ª—å—à–µ')
    bot.send_message(message.chat.id, '–ö–∞–∫ —è —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª, —è –±–æ—Ç-—Ç—Ä–µ–Ω–∞–∂–µ—Äü§ñ! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è'
                                      ' –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—èüìöüìñ. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —ç—Ç–æ –∞–ª—Ñ–∞–≤–∏—Ç!')
    bot.send_message (message.chat.id, '–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏–¥–∏–æ–º—ã, –±–µ–∑ –∑–Ω–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –æ–±–æ–π—Ç–∏—Å—å.'
                                      '–¢–∞–∫–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∏—Ö –∑–Ω–∞–Ω–∏–∏ –≤ –º–∏–Ω–∏–∏–≥—Ä–µ!')
    to_menu=bot.send_message(message.chat.id, '–ß—Ç–æ –∂–µ —Ç–∞–∫–æ–µ –∏–¥–∏–æ–º—ã? –í –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ'
                                      ' –Ω–µ –∏–º–µ—é—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞. –≠—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∏–¥–∏–æ–º–∞–º–∏ –∏ –∞–Ω–≥–ª–∏—á–∞–Ω–µ'
                                      ' –¥–æ–≤–æ–ª—å–Ω–æ —á–∞—Å—Ç–æ –∏—Ö —É–ø–æ—Ç—Ä–µ–±–ª—è—é—Ç. –ó–∞–ø–æ–º–Ω–∏–≤ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∏—Ö, —Ç—ã'
                                      ' —Å–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Ä–µ—á—å —è—Ä—á–µ –∏ –∂–∏–≤–µ–µ.', reply_markup=kb1)
    bot.register_next_step_handler(to_menu, learni)

def menu_0(message):
    img = open('img.png', 'rb')
    kb = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='üìö–£—á–∏—Ç—å—Å—è', callback_data='learni')
    kb.add(btn)
    bot.send_message(message.chat.id, '–ò—Ç–∞–∫, –Ω–∞—á–Ω—ë–º —É—á–∏—Ç—å—Å—è?ü§î', reply_markup=kb)

@bot.message_handler(commands=['menu'])
def menu(message):
    kb = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='üìö–£—á–∏—Ç—å—Å—è', callback_data='learn')
    btn1 = types.InlineKeyboardButton(text='üéÆ–ò–≥—Ä–∞—Ç—å', callback_data='game')
    btn2 = types.InlineKeyboardButton(text='üìñ–û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å', callback_data='vocabulary')
    kb.add(btn)
    kb.add(btn1)
    kb.add(btn2)
    bot.send_message(message.chat.id, '–ò—Ç–∞–∫, —á–µ–º –±—É–¥–µ–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?ü§î', reply_markup=kb)

@bot.message_handler(commands=['vocabulary'])
def vocabulary(message):
    wlist=[]
    ilist=[]
    wtext='-\n-\n-\n-\n–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ.üòî \n–ó–∞—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –≤—ã—É—á–∏—à—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!\n-\n-\n-\n-'
    itext='-\n-\n-\n-\n–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ.üòî \n–ó–∞—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –≤—ã—É—á–∏—à—å –Ω–æ–≤—ã–µ –∏–¥–∏–æ–º—ã!\n-\n-\n-\n-'
    count=0
    count2=0
    db_worker = SQLighter("wordsdb.db")
    rows = db_worker.get_vocabulary('words')
    rows2 = db_worker.get_vocabulary('idioms')
    db_worker.close()
    if len(rows) != 0:
        count = len(rows)
        wtext = ''
        for i in range(len(rows)):
            wlist.append(rows[i][1] + ' - ' + rows[i][2])
            wtext += str(wlist[i]) + '\n'
    if len(rows2)!=0:
        count2 = len(rows2)
        itext = ''
        for j in range(len(rows2)):
            ilist.append(rows2[j][1] + ' - ' + rows2[j][2])
            itext += str(ilist[j]) + '\n'
    kb = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu')
    kb.add(btn)
    bot.send_message(message.chat.id, 'üìé–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ' + str(count) + '\n<b>–°–ø–∏—Å–æ–∫:</b>' + '\n' + wtext, parse_mode='html')
    bot.send_message(message.chat.id, 'üìé–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∏–¥–∏–æ–º: ' + str(count2) + '\n<b>–°–ø–∏—Å–æ–∫:</b>' + '\n' + itext, parse_mode='html', reply_markup=kb)


def learni(message):
    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–£—á–∏—Ç—å', callback_data='idioms')
    kb.add(btn1)
    img = open('img.png', 'rb')
    bot.send_photo(message.chat.id, img, caption='–ü—Ä–∏–≤–µ—Ç!\n–ú—ã –±—Ä–∞—Ç—å—è –ë–æ–¥–∫–∏–Ω—ã –∏ –º—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å! \n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –Ω–∞—á–∞—Ç—å —Å –∏–∑—É—á–µ–Ω–∏—è –∏–¥–∏–æ–º, –∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.', reply_markup=kb)

@bot.message_handler(commands=['learn'])
def learn(message):
    kb = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–°–ª–æ–≤–∞', callback_data='words')
    btn1 = types.InlineKeyboardButton(text='–ò–¥–∏–æ–º—ã', callback_data='idioms')
    kb.add(btn, btn1)
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —Ç—ã —Ö–æ—Ç–µ–ª –≤—ã—É—á–∏—Ç—å?ü§ì', reply_markup=kb)

def learn1(message):
    kb1 = types.ReplyKeyboardMarkup(True, True)
    kb1.row('–û–¥–µ–∂–¥–∞', '–ñ–∏–≤–æ—Ç–Ω—ã–µ')
    kb1.row('–¢–µ—Ö–Ω–∏–∫–∞', '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏')
    return bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞.üëá', reply_markup=kb1)

def learn2(message):
    db_worker = SQLighter("wordsdb.db")
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–î–∞–ª—å—à–µ', callback_data='idioms')
    btn2 = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu')
    markup.add(btn)
    markup.add(btn2)
    list2 = db_worker.select_all_v2('idioms')
    if len(list2) == 0:
        list2 = db_worker.select_all('idioms')
    random.shuffle(list2)
    idiom = list2[0][1].upper()
    bot.send_message(message.chat.id, '<b>' + idiom + '</b>' +
                     '\nüìñ' + '<i>' + list2[0][2] + '</i>', parse_mode='html', reply_markup=markup)
    db_worker.insertq(list2[0][0], 'idioms')
    db_worker.close()

@bot.message_handler(commands=['learnword'])
def learnword(message):
    global list1
    global msg
    db_worker = SQLighter("wordsdb.db")
    marks = ['–°–ª–æ–≤–æ: ', '–ü–µ—Ä–µ–≤–æ–¥: ']
    if len(list1)==0:
            list1 = db_worker.select_single_category(msg)
    text = list()
    random.shuffle(list1)
    for j in range(len(marks)):
        text.append(marks[j] + list1[0][j+1])
    c = "\n".join([str(x) for x in text])
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–î–∞–ª—å—à–µ', callback_data='det')
    btn1 = types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', callback_data='new')
    btn2 = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu')
    markup.add(btn, btn1)
    markup.add(btn2)
    bot.send_photo(message.chat.id, list1[0][4], caption=c, reply_markup=markup)
    db_worker.insertq(list1[0][0], 'words')
    del list1[0]
    db_worker.close()

@bot.message_handler(commands=['game'])
def game(message):
    global urword
    global wordlist
    global trans
    db_worker = SQLighter("wordsdb.db")
    kb1 = telebot.types.ReplyKeyboardMarkup(True, False)
    voclist = db_worker.get_vocabulary('words')
    if len(voclist) < 4:
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—É—á–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 —Å–ª–æ–≤–∞.')
    else:
        i = random.randint(0, len(voclist) - 1)
        word = voclist[i][1]
        trans = voclist[i][2]
        urword = word
        if urword == message.text:
            game(message)
        else:
            wordlist = list(db_worker.select_word_column())
            wordlist.remove(word)
            del wordlist[3:]
            wordlist.append(word)
            random.shuffle(wordlist)
            kb1.row(wordlist[0], wordlist[1])
            kb1.row(wordlist[2], wordlist[3])
            kb1.row('–ú–µ–Ω—é')
            bot.send_photo(message.chat.id, voclist[i][4], caption=trans, reply_markup=kb1)
    db_worker.close()

@bot.callback_query_handler(func=lambda call: True)
def ans(call):
    if call.data == "det":
        learnword(call.message)
    if call.data == "new" or call.data == "words":
        learn1(call.message)
    if call.data == "idioms":
        learn2(call.message)
    if call.data == "game":
        game(call.message)
    if call.data == "vocabulary":
        vocabulary(call.message)
    if call.data == "learn":
        learn(call.message)
    if call.data == "learni":
        learni(call.message)
    if call.data == "menu":
        menu(call.message)

def defs(message):
    if message.text == '/start':
        start_message(message)
    elif message.text == '/game':
        game(message)
    elif message.text == '/vocabulary':
        vocabulary(message)
    elif message.text == '/help':
        help_message(message)
    elif message.text == '/menu':
        menu(message)
    elif message.text == '/learn':
        learn(message)
    else:
        return False

@bot.message_handler(content_types=['text'])
def cate(message):
    dodef = defs(message)
    if dodef == False:
        global list1
        global msg
        global urword
        global score
        global maxscore
        if score > maxscore:
            maxscore = score
        db_worker = SQLighter("wordsdb.db")
        cat = db_worker.select_cat_column()
        try:
            if message.text in cat:
                msg = message.text
                list1 = db_worker.select_single_category(msg)
                if message.text == '–û–¥–µ–∂–¥–∞':
                    img = open('img4.png', 'rb')
                    bot.send_photo(message.chat.id, img, caption='–ü—Ä–∏–≤–µ—Ç! –Ø –ë–µ–Ω –ë–æ–¥–∫–∏–Ω –∏ —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –≤—ã—É—á–∏–ª –∏–¥–∏–æ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ'
                                                            ' —Å –æ–¥–µ–∂–¥–æ–π. –Ø –æ–±–æ–∂–∞—é –æ–¥–µ–∂–¥—É –∏ –Ω–∞—É—á—É —Ç–µ–±—è –≤—Å–µ–º—É, —á—Ç–æ –∑–Ω–∞—é!')
                elif message.text == '–ñ–∏–≤–æ—Ç–Ω—ã–µ':
                    img = open('img3.png', 'rb')
                    bot.send_photo(message.chat.id, img, caption='–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∏–ª–ª –ë–æ–¥–∫–∏–Ω –∏ —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –≤—ã—É—á–∏–ª –∏–¥–∏–æ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ'
                                                                 ' —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏. –Ø –æ–±–æ–∂–∞—é –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –Ω–∞—É—á—É —Ç–µ–±—è –≤—Å–µ–º—É, —á—Ç–æ –∑–Ω–∞—é!')
                elif message.text == '–¢–µ—Ö–Ω–∏–∫–∞':
                    img = open('img2.png', 'rb')
                    bot.send_photo(message.chat.id, img, caption='–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ–± –ë–æ–¥–∫–∏–Ω –∏ —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –≤—ã—É—á–∏–ª –∏–¥–∏–æ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ'
                                                                 ' —Å —Ç–µ—Ö–Ω–∏–∫–æ–π. –Ø –ª—é–±–ª—é —Ç–µ—Ö–Ω–∏–∫—É –∏ –Ω–∞—É—á—É —Ç–µ–±—è –≤—Å–µ–º—É, —á—Ç–æ –∑–Ω–∞—é!')
                else:
                    img = open('img1.png', 'rb')
                    bot.send_photo(message.chat.id, img, caption='–ü—Ä–∏–≤–µ—Ç! –Ø –ë–µ—Ä—Ç–∏ –ë–æ–¥–∫–∏–Ω –∏ —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –≤—ã—É—á–∏–ª –∏–¥–∏–æ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –µ–¥–æ–π. '
                                                                 '–Ø –æ—á–µ–Ω—å –ª—é–±–ª—é –≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å, –∞ —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—å. –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –≤—Å–µ –æ –µ–¥–µ –∏ –Ω–∞–ø–∏—Ç–∫–∞—Ö!')
                learnword(message)
            elif message.text in wordlist:
                if message.text==urword:
                    bot.send_message(message.chat.id, 'üëç–í–µ—Ä–Ω–æ!')
                    score+=1
                else:
                    bot.send_message(message.chat.id, '‚ùå–£–≤—ã! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + '<b>'+urword+'</b>'+'.', parse_mode='html')
                    score = 0
                game(message)
            elif message.text == '–ú–µ–Ω—é':
                rm = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ–¥—Ä—è–¥: ' + str(score) +
                                 '\n<b>–†–µ–∫–æ—Ä–¥</b>: ' + str(maxscore), reply_markup=rm, parse_mode='html')
                menu(message)
            elif message.text == '–ú–µ–Ω—é':
                rm = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ–¥—Ä—è–¥: ' + str(score) +
                                 '\n<b>–†–µ–∫–æ—Ä–¥</b>: ' + str(maxscore), reply_markup=rm, parse_mode='html')
                menu(message)
            else:
                bot.send_message(message.chat.id, '‚ö†Ô∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –≤—ã.')
        except:
            bot.send_message(message.chat.id, '‚ö†Ô∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –≤—ã.')
        db_worker.close()
if __name__ == '__main__':
    bot.polling(none_stop=True)